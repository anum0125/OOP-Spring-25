# include <iostream>
using namespace std;

int** dma(int rows, int cols);
void populateMatrix(int **array, int rows, int cols);
void matrixAddition(int **matrix1, int **matrix2, int row1, int col1, int row2, int col2);
void matrixSubtraction(int **matrix1, int **matrix2, int row1, int col1, int row2, int col2);
void matrixMultiplication(int **matrix1, int **matrix2, int row1, int col1, int row2, int col2);
void displayMatrix(int **matrix, int rows, int cols);
void freeMemory(int **array, int rows);

int main()
{
      int row1, col1, row2, col2;
      cout << "Enter the rows of the first matrix: " << endl;
      cin >> row1;
      cout << "Enter the columns of the first matrix: " << endl;
      cin >> col1;
      cout << "Enter the rows of the second matrix: " << endl;
      cin >> row2;
      cout << "Enter the columns of the second matrix: " << endl;
      cin >> col2;

      int **matrix1 = dma(row1, col1);
      int **matrix2 = dma(row2, col2);
      populateMatrix(matrix1, row1, col1);
      populateMatrix(matrix2, row2, col2);
      matrixAddition(matrix1, matrix2, row1, col1, row2, col2);
      matrixSubtraction(matrix1, matrix2, row1, col1, row2, col2);
      matrixMultiplication(matrix1, matrix2, row1, col1, row2, col2);
      freeMemory(matrix1, row1);
      freeMemory(matrix2, row2);
}       
     

int** dma(int rows, int cols)
{
    int **array = new int * [rows];
    for (int i = 0; i < rows; i++)
    {
        array[i] = new int[cols];
    }
    return array;
}
void populateMatrix(int **array, int rows, int cols)
{
    cout << "Enter element for 2D Array: "<< endl;
    for (int i = 0; i < rows; i++)
    {
        cout << "Row " << i+1<< endl; 
        for (int j = 0; j < cols; j++)
        {
            cout << "Column " << j+1 << ":";
            cin >> *(*(array + i) + j);
        }
        
    }
}

void freeMemory(int **array, int rows)
{
    for (int i = 0; i < rows; i++)
    {
        delete[] array[i];
    }
    delete[] array;
    
    cout << "Dynamically allocated memory has been freed."<< endl;
}

void matrixAddition(int **matrix1, int **matrix2, int row1, int col1, int row2, int col2)
{
    if ((row1 == row2) && (col1 == col2))
    {
        int **result = dma(row1, col1);
        for (int i = 0; i < row1; i++)
        {
            for (int j = 0; j < col1; j++)
            {
                *(*(result + i) + j) =  *(*(matrix1 + i) + j) + *(*(matrix2 + i) + j);
            }
        }
        cout << "\n";
        displayMatrix(result, row1, col1);
        freeMemory(result, row1);
    }
    else
    {
        cout << "Matrix Addition is not possible." << endl;
    }
}

void matrixSubtraction(int **matrix1, int **matrix2, int row1, int col1, int row2, int col2)
{
    if ((row1 == row2) && (col1 == col2))
    {
        int **result = dma(row1, col1);
        for (int i = 0; i < row1; i++)
        {
            for (int j = 0; j < col1; j++)
            {
                *(*(result + i) + j) =  *(*(matrix1 + i) + j) - *(*(matrix2 + i) + j);
            }
        }
        cout << "\n";
        displayMatrix(result, row1, col1);
        freeMemory(result, row1);
    }
    else
    {
        cout << "Matrix Subtraction is not possible." << endl;
    }
}

void matrixMultiplication(int **matrix1, int **matrix2, int row1, int col1, int row2, int col2)
{
    if (col1 == row2)
    {
        int **result = dma(col1, row2);
        for (int i = 0; i < row1; i++) 
        {
            for (int j = 0; j < col2; j++) 
            {
                result[i][j] = 0;
                for (int k = 0; k < col1; k++) 
                {
                    result[i][j] += matrix1[i][k] * matrix2[k][j];
                }
            }
        }
        displayMatrix(result, col1, row2);
        freeMemory(result, col1); 
    }
    else
    {
        cout << "Matrix Multiplication is not possible.";
    }
      
}


void displayMatrix(int **matrix, int rows, int cols)
{
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            cout <<  *(*(matrix + i) + j) << "  ";
        }
        cout << "\n";
    }
}
