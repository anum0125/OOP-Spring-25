# include <iostream>
# include <string>

using namespace std;

int** dma(int rows, int cols);
void populateMatrix(int **array, int rows, int cols);
void displayMatrix(int **matrix, int rows, int cols);
void freeMemory(int **array, int rows);
void transpose(int **matrix, int** transposed, int rows, int cols);

int main()
{
    int rows, cols;
    cout << "Enter the rows of the matrix: " << endl;
    cin >> rows;
    cout << "Enter the columns of the matrix: " << endl;
    cin >> cols;
    int **matrix = dma(rows, cols);
    populateMatrix(matrix, rows, cols);
    
    int** transposed = dma(cols, rows);

    cout << "\nMatrix before transposition: \n" << endl; 
    displayMatrix(matrix, rows, cols);

    transpose(matrix, transposed, rows, cols);
    cout << "\nMatrix after transposition: \n" << endl;
    displayMatrix(transposed, cols, rows);

    freeMemory(matrix, rows);
    freeMemory(transposed, cols);

}

int** dma(int rows, int cols)
{
    int **array = new int * [rows];
    for (int i = 0; i < rows; i++)
    {
        array[i] = new int[cols];
    }
    return array;
}
void populateMatrix(int **array, int rows, int cols)
{
    cout << "Enter element for 2D Array: "<< endl;
    for (int i = 0; i < rows; i++)
    {
        cout << "\nRow " << i+1<< endl; 
        for (int j = 0; j < cols; j++)
        {
            cout << "Column " << j+1 << ":";
            cin >> *(*(array + i) + j);
        }
        
    }
}

void freeMemory(int **array, int rows)
{
    for (int i = 0; i < rows; i++)
    {
        delete[] array[i];
    }
    delete[] array;
    
    cout << "\nDynamically allocated memory has been freed."<< endl;
}

void displayMatrix(int **matrix, int rows, int cols)
{
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            cout <<  *(*(matrix + i) + j) << "  ";
        }
        cout << "\n";
    }
}

void transpose(int **matrix, int** transposed, int rows, int cols)
{
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            *(*(transposed + j) + i) = *(*(matrix + i) + j);
        }
    }
}
